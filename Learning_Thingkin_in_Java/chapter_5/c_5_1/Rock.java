package chapter_5.c_5_1;

/**
 * @Author: Mr.Lin
 * @Description:
 * @Date: Create in 19:55 2019/12/24
 *
 * 对于方法的创建，可将其想象成为自己写的每个类都调用一次 initialize()。这个名字提醒我们在使用对象
 * 之前，应首先进行这样的调用。但不幸的是，这也意味着用户必须记住调用方法。在 Java 中，由于提供了名
 * 为“构建器”的一种特殊方法，所以类的设计者可担保每个对象都会得到正确的初始化。若某个类有一个构
 * 建器，那么在创建对象时，Java 会自动调用那个构建器——甚至在用户毫不知觉的情况下。所以说这是可以
 * 担保的！
 * 接着的一个问题是如何命名这个方法。存在两方面的问题。第一个是我们使用的任何名字都可能与打算为某
 * 个类成员使用的名字冲突。第二是由于编译器的责任是调用构建器，所以它必须知道要调用是哪个方法。C++
 * 采取的方案看来是最简单的，且更有逻辑性，所以也在Java 里得到了应用：构建器的名字与类名相同。这样
 * 一来，可保证象这样的一个方法会在初始化期间自动调用。
 *
 */
public class Rock {

    Rock(){
        System.out.println("Create Rock");
    }

    Rock(int i) {
        System.out.println("Create" + i);
    }

}
